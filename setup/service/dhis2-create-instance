#!/usr/bin/env bash
#       ____  __  ______________
#      / __ \/ / / /  _/ ___/__ \
#     / / / / /_/ // / \__ \__/ /
#    / /_/ / __  // / ___/ / __/
#   /_____/_/ /_/___//____/____/
#
#   Script to deploy a dhis2 instance

PROG=`basename $0`
CREATEDB=true
TOMCAT_SETUP=/usr/local/etc/dhis/tomcat_setup
GLOWROOT_SETUP=/usr/local/etc/dhis/glowroot-admin.json
CREDENTIALS_FILE=/usr/local/etc/dhis/.credentials.json

APM=$(cat /usr/local/etc/dhis/containers.json| jq -r .apm)
PROXY=$(cat /usr/local/etc/dhis/containers.json| jq -r .proxy)
PROXY_IP=$(cat /usr/local/etc/dhis/containers.json| jq -r '.containers[] | select(.name=="proxy") | .ip')
JAVA_VERSION="11"

GUESTOS=20.04

###############################################################
usage() {
  echo "Usage: $PROG [options] <instance> [<ip>] [<postgres_container>]"
  echo "  instance: name of the dhis2 instance to create"
  echo "  ip: the ip address of the container (default picks next free IP ending in .10 to .19"
  echo "  postgres_container: the name of postgresql container (default postgres)"
  echo "Options:"
  echo "  -h, --help       Display this help message"
  echo "  -n               Do NOT create database for instance"
  echo "  -j <8|11>        Java version. Default is 8"
  exit 1
}

# main entry point
echo checking options
while getopts p:nhj: opt
do
  case $opt in
    n) CREATEDB=false ;;
    j) JAVA_VERSION="${OPTARG}"
       [[ $JAVA_VERSION == "8" || $JAVA_VERSION == "11" ]] || usage
       ;;
    h) usage;;
    *) echo "Error: Unknown parameter '$OPTARG'."
      exit 1;;
  esac
done

shift $(($OPTIND - 1))

if [ "$#" -lt 1 ]; then
  usage
fi

NAME=$1

USED=$(lxc list -cn4 --format csv |awk -F '.' '/1[0-9]? / {print strtonum($4)}')
for FREE in {10..20}; do  echo $USED | grep -q -w $FREE || break; done
# if FREE==20 then nothing found
NETPREFIX=$(ip addr | awk '/inet.*lxdbr0/ {print $2}'|grep -o -e '^[0-9]*.[0-9]*.[0-9]*')
FREEIP="${NETPREFIX}.${FREE}"

IP=${2:-${FREEIP}}
PG=${3:-postgres}

# convert IP to regex
IPREGEX=$(echo $IP |sed "s/\./\\\./g")

# check Container name is available
if [[ $(lxc list -c n --format csv $NAME) ]];
then 
  echo Container $1 already exists;
  exit 1  
fi

# Check IP is available
if [[ $(lxc list -c 4 |grep $IPREGEX) ]];
then
  echo "$IP already in use"
  exit 1
fi

if [ $CREATEDB ] 
then

  # Check if Postgres container exists
  if [ ! $(lxc list -c n --format csv $PG) ];
  then
    echo No such container $PG;
    exit 1
  fi

  # Check postgres version
  PGVERSION=$(lxc exec $PG -- psql -t -c 'select version()' postgres |awk '/PostgreSQL/ {print $2}')
  if [ -z $PGVERSION ] 
  then
    echo "Cant connect to a postgres server on $PG"
    exit 1
  fi
  PGMAJOR=$(echo $PGVERSION |cut -d. -f 1)

  # Check if database already exists
  if [ $(lxc exec $PG -- psql -lqt --csv |cut -d ','  -f 1 |grep -w $NAME) ]
  then
    echo "Database $NAME already exists"
    exit 1
  fi

  # Check if database user already exists
  if [ $(lxc exec $PG -- psql  --csv -qt -c '\du' postgres| cut -d,  -f1 |grep -w $NAME) ]
  then
    echo "User $NAME already exists"
    exit 1
  fi

  echo "Creating database $NAME on $PG"
  PASSWD=$(openssl rand -hex 20)
  lxc exec $PG -- createuser $NAME
  lxc exec $PG -- psql -c "ALTER user $NAME with PASSWORD '$PASSWD'" postgres 
  lxc exec $PG -- createdb -O $NAME $NAME
  lxc exec $PG -- psql -c "CREATE EXTENSION postgis" $NAME


  # Fixing pg_hba.conf permissions
  # get rid of any existing lines for the IP
  lxc exec $PG -- sed -i "/$IPREGEX/d" /etc/postgresql/$PGMAJOR/main/pg_hba.conf
  lxc exec $PG -- sed -i "$ a\
    host $NAME $NAME $IP/32 md5" /etc/postgresql/$PGMAJOR/main/pg_hba.conf
      lxc exec $PG -- service postgresql reload
      # add firewall rule
      lxc exec $PG ufw allow proto tcp from $IP to any port 5432
fi

echo "Creating tomcat container $NAME"

lxc init ubuntu:$GUESTOS $NAME

# set ip addresses
sudo lxc network attach lxdbr0 $NAME eth0 eth0
sudo lxc config device set $NAME eth0 ipv4.address $IP

# lxc config set $NAME boot.autostart false
lxc config set $NAME user.type "Tomcat server"
lxc start $NAME 

# wait for network to come up
while true ; do
  lxc exec $NAME -- nslookup archive.ubuntu.com >/dev/null && break || echo waiting for network; sleep 1 ;
done

# Added PROXY_IP to tomcat_setup
sed "s/PROXY_IP/${PROXY_IP}/" $TOMCAT_SETUP > /tmp/tomcat_setup
sed -i "s/JAVA_VERSION/${JAVA_VERSION}/" /tmp/tomcat_setup
cat /tmp/tomcat_setup | lxc exec $NAME -- bash
rm /tmp/tomcat_setup

if [ $CREATEDB ]
then	
  lxc exec $NAME -- sed -i "s/^connection.username.*$/connection.username = $NAME/" /opt/dhis2/dhis.conf
  lxc exec $NAME -- sed -i "s/^connection.password.*$/connection.password = $PASSWD/" /opt/dhis2/dhis.conf
  lxc exec $NAME -- sed -i "s/^connection.url.*$/connection.url = jdbc:postgresql:\/\/$PG\/$NAME/" /opt/dhis2/dhis.conf
fi

if [[ $APM == "glowroot" ]]; 
then
  #Set credentials for glowroot
  dhis2-setCredential ${NAME}-glowroot admin
  GLOWROOT_PASSWD=$(cat ${CREDENTIALS_FILE} | jq -r --arg name $NAME-glowroot '.credentials[] | select(.name==$name) | .password')
  GLOWROOT_USERNAME==$(cat ${CREDENTIALS_FILE} | jq -r --arg name $NAME-glowroot '.credentials[] | select(.name==$name) | .username')
  sed -r '/glowroot.jar/ s/..(.*)/\1/' /usr/local/etc/dhis/tomcat_default > /tmp/tomcat9
  lxc file push /tmp/tomcat9 $NAME/etc/default/tomcat9
  lxc exec $NAME -- wget -P /opt https://github.com/glowroot/glowroot/releases/download/v0.13.6/glowroot-0.13.6-dist.zip 
  lxc exec $NAME -- unzip -o /opt/glowroot-0.13.6-dist.zip -d /opt
  #Encrypt glowroot password
  wget -P /tmp https://github.com/glowroot/glowroot/releases/download/v0.13.6/glowroot-central-0.13.6-dist.zip
  unzip -o /tmp/glowroot-central-0.13.6-dist.zip -d /tmp
  GLOWROOT_PASSWD_ENC=$(java -jar /tmp/glowroot-central/glowroot-central.jar hash-password $GLOWROOT_PASSWD)
  jq --arg context /${NAME}-glowroot '.web.contextPath=$context' $GLOWROOT_SETUP > /tmp/glowroot-admin.json.tmp
  jq --arg passwordHash $GLOWROOT_PASSWD_ENC '.users[].passwordHash=$passwordHash' /tmp/glowroot-admin.json.tmp > /tmp/glowroot-admin.json
  lxc file push /tmp/glowroot-admin.json $NAME/opt/glowroot/admin.json
  lxc exec $NAME -- chown -R tomcat.tomcat /opt/
  lxc exec $NAME ufw allow proto tcp from $PROXY_IP to any port 4000

  rm /tmp/tomcat9
  rm -rf /tmp/glowroot*
else
  lxc file push /usr/local/etc/dhis/tomcat_default $NAME/etc/default/tomcat9
fi
lxc exec $NAME -- chmod 644 /etc/default/tomcat9
lxc exec $NAME -- systemctl daemon-reload
lxc exec $NAME -- service rsyslog restart
lxc exec $NAME -- service tomcat9 restart

# Append to bottom /etc/hosts
sudo sed -i "/$IP/d" /etc/hosts
sudo sed -i "$ a\
  $IP $NAME" /etc/hosts


if [[ $PROXY == "nginx" ]];
then
#if proxy is nginx ;
  cat <<EOF > /tmp/${NAME}.conf
    # Proxy pass to servlet container

    location /${NAME} {
      proxy_pass                http://${IP}:8080/${NAME};
      proxy_redirect            off;
      proxy_set_header Host \$host;
      proxy_set_header X-Real-IP \$remote_addr;
      proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto  \$scheme;
	  proxy_hide_header X-Frame-Options;
      proxy_hide_header Strict-Transport-Security;
      proxy_hide_header X-Content-Type-Options;
      proxy_hide_header X-XSS-protection;
	  proxy_hide_header X-Powered-By;
	  proxy_hide_header Server;

      proxy_connect_timeout  480s;
      proxy_read_timeout     480s;
      proxy_send_timeout     480s;

      proxy_buffer_size        128k;
      proxy_buffers            8 128k;
      proxy_busy_buffers_size  256k;
   }
EOF

  lxc file push /tmp/${NAME}.conf proxy/etc/nginx/upstream/${NAME}.conf
  rm /tmp/${NAME}.conf
  
  if [[ $APM == "glowroot" ]]; 
  then
    cat <<EOF > /tmp/${NAME}-glowroot.conf
    # Proxy pass to servlet container

    location /${NAME}-glowroot {
      proxy_pass                http://${IP}:4000/${NAME}-glowroot;
      proxy_redirect            off;
      proxy_set_header Host \$host;
      proxy_set_header X-Real-IP \$remote_addr;
      proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto  \$scheme;
	  proxy_hide_header X-Frame-Options;
      proxy_hide_header Strict-Transport-Security;
      proxy_hide_header X-Content-Type-Options;
      proxy_hide_header X-XSS-protection;
	  proxy_hide_header X-Powered-By;
	  proxy_hide_header Server;

      proxy_connect_timeout  480s;
      proxy_read_timeout     480s;
      proxy_send_timeout     480s;

      proxy_buffer_size        128k;
      proxy_buffers            8 128k;
      proxy_busy_buffers_size  256k;
   }
EOF

    lxc file push /tmp/${NAME}-glowroot.conf proxy/etc/nginx/upstream/${NAME}-glowroot.conf
    rm /tmp/${NAME}-glowroot.conf
  fi
  
  lxc exec proxy -- service nginx restart
elif [[ $PROXY == "apache2" ]];
then
#if proxy is apache2 ;
  cat <<EOF > /tmp/${NAME}
  <Location /${NAME}>
    Require all granted
    ProxyPass "http://${IP}:8080/${NAME}"
    ProxyPassReverse "http://${IP}:8080/${NAME}"
  </Location>
EOF

  lxc file push /tmp/${NAME} proxy/etc/apache2/upstream/${NAME}
  rm /tmp/${NAME}
  
  if [[ $APM == "glowroot" ]]; 
  then
    cat <<EOF > /tmp/${NAME}-glowroot
  <Location /${NAME}-glowroot>
    Require all granted
    ProxyPass "http://${IP}:4000/${NAME}-glowroot"
    ProxyPassReverse "http://${IP}:4000/${NAME}-glowroot"
  </Location>
EOF

    lxc file push /tmp/${NAME}-glowroot proxy/etc/apache2/upstream/${NAME}-glowroot
    rm /tmp/${NAME}-glowroot
  fi
  
  lxc exec proxy -- service apache2 restart
else
  echo "Error: Proxy type not supported"
  exit 1
fi

